import java.lang.reflect.Array;
import java.util.Arrays;

public class Greedy_Platform_required_9 {

    public static int platform_required_for_railway(int arrival[] ,int depart[]){
        int max_count=0;

        for(int i=0;i<arrival.length;i++){
            int count=1;
            for(int j=0;j<depart.length;j++){
                
                if(i != j && arrival[i] < depart[j] && arrival[j] < depart[i]){
                    count++;
                }
                max_count=Math.max(max_count, count);
            }
        }
        return max_count;
    }

    public static int platform_required_for_railway_optimized(int arrival[] ,int depart[]) {
        Arrays.sort(arrival);
        Arrays.sort(depart);
        int max =0;
        int count=0;
        int n=arrival.length;
        int i=0;
        int j=0;

        while (i<n && j<n) {
            if(arrival[i] <= depart[j]){
                count++;
                i++;
            }
            else{
                count--;
                j++;
            }
            max=Math.max(max, count);
        }
        return max;
    }

    public static void main(String[] args) {
        int arrival[] = {900, 940, 950, 1100, 1500, 1800};
        int depart[] = {910, 1200, 1120, 1130, 1900, 2000};

        int result=platform_required_for_railway(arrival, depart);
        System.out.println(result);

        int result2=platform_required_for_railway_optimized(arrival, depart);
        System.out.println(result2);
    }
}


//Time Complexity	O(n log n)	Sorting of arrival & departure arrays
//Space Complexity	O(1)	In-place sorting, constant extra variables
