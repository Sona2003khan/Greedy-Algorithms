class Solution {
    public int jump(int[] nums) {
        int n = nums.length;
        int l = 0;
        int r = 0;
        int farthest = 0;
        int jump = 0;

        while (r < n - 1) {
            for (int i = l; i <= r; i++) {
                farthest = Math.max(farthest, i + nums[i]);
            }
            l = r + 1;
            r = farthest;
            jump++;
        }
        return jump;
    }
}

// Time Complexity: O(n) -> each index is processed at most once across all iterations
// Space Complexity: O(1) -> uses only constant extra variables
