import java.util.Arrays;

public class Greedy_maximum_units_on_truck_2 {

    public static int maximumUnits(int[][] boxTypes, int truckSize) {
         Arrays.sort(boxTypes, (a,b) -> b[1] - a[1]);

         int result = 0;

         for(int box[] : boxTypes){
            int noOfBoxes = box[0];
            int noOfUnits = box[1];

            if(truckSize > noOfBoxes){
                result += noOfBoxes * noOfUnits;
                truckSize -= noOfBoxes;
            }
            else{
                result += truckSize * noOfUnits;
                return result;
            }
         }
         return result;
    }

    public static void main(String[] args) {
        int boxTypes[][] = {{1,3} ,{2,2} ,{3,1}};
        int truckSize = 4;
        int result = maximumUnits(boxTypes, truckSize);
        System.out.println(result);
    }
}

// Time Complexity: O(n log n), where n is the number of boxTypes (due to sorting).
// Space Complexity: O(1), since sorting is in-place and only constant extra variables are used.
